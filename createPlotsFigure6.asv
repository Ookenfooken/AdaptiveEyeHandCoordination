% read in saved gaze data structure
analysisPath = pwd;
resultPath = fullfile(pwd,'results\');
savePath = fullfile(pwd,'R\');
cd(resultPath)
load('pulledData')
cd(analysisPath);

%%
numParticipants = 11;
letterChanges = [];

for j = 1:numParticipants % loop over subjects
    for blockID = 3:4 % loop over dual task conditions
        currentResult = pulledData{j,blockID};
        currentParticipant = currentResult(1).info.subject;
        numTrials = length(currentResult);
        % open variable matrices that we want to pull
        subject = currentParticipant*ones(numTrials, 1);
        testID = blockID*ones(numTrials,1);
        letterChange = NaN(numTrials,1);
        numLetterChange = NaN(numTrials,1);
        reachOnset = NaN(numTrials,1);
        displayFixationTime = NaN(numTrials,1);
        stopTrial = min([numTrials 30]);
        for n = 1:stopTrial % loop over trials for current subject & block
            if currentResult(n).info.dropped
                stopTrial = min([stopTrial+1 numTrials]);
                continue
            end
            startTime = currentResult(n).info.trialStart;
            letterChange(n) = currentResult(n).dualTask.sampleLetterChange(1);
            if isnan(currentResult(n).dualTask.sampleLetterChange)
                numLetterChange(n) = 0;
            else
                numLetterChange(n) = numel(currentResult(n).dualTask.sampleLetterChange);
            end
            reachOnset(n) = currentResult(n).info.phaseStart.primaryReach; 
            displayFixationTime(n) = sum(currentResult(n).gaze.fixation.durationDisplay)./...
                                     (sum(currentResult(n).gaze.fixation.durationBall) + ...
                                     sum(currentResult(n).gaze.fixation.durationSlot) + ...
                                     sum(currentResult(n).gaze.fixation.durationDisplay));          
        end
        currentVariable = [subject testID numLetterChange letterChange ...
                           reachOnset displayFixationTime];
        
        letterChanges = [letterChanges; currentVariable];
        clear startTime trialLength
    end
end

%% plot frequency of letter changes in a trial for fintertips and tweezers (Panel A)
letterChangeNo = NaN(2, 4);
for j = 1:2 % hand and tweezer
    currentData = letterChanges(letterChanges(:,2) == j+2, :);
    currentData = currentData(~isnan(currentData(:,3)),:);
    allTrials = size(currentData,1);
    for blockID = 1:4
        letterChangeNo(j,blockID) = length(currentData(currentData(:,3) == blockID-1,:))/allTrials;
    end
    clear allTrials    
end
figure(123)
hold on
xlim([.5 4.5])
set(gca, 'Xtick', [1 2 3 4], 'XtickLabel', {'0 letter changes', '1 letter change', '2 letter changes', '3 letter changes'})
ylim([0 .75])
set(gca, 'Ytick', [0 .25 .5 .75])

for blockID = 1:4
    plot(blockID, letterChangeNo(1,blockID), 'o', 'MarkerFaceColor', 'k','MarkerEdgeColor', 'k')
    plot(blockID, letterChangeNo(2,blockID), 'o', 'MarkerFaceColor', 'none','MarkerEdgeColor', 'k')
end
line([1 2], [letterChangeNo(1,1) letterChangeNo(1,2)], 'Color', 'k')
line([2 3], [letterChangeNo(1,2) letterChangeNo(1,3)], 'Color', 'k')
line([3 4], [letterChangeNo(1,3) letterChangeNo(1,4)], 'Color', 'k')
line([1 2], [letterChangeNo(2,1) letterChangeNo(2,2)], 'Color', 'k', 'LineStyle', '--')
line([2 3], [letterChangeNo(2,2) letterChangeNo(2,3)], 'Color', 'k', 'LineStyle', '--')
line([3 4], [letterChangeNo(2,3) letterChangeNo(2,4)], 'Color', 'k', 'LineStyle', '--')

%% readout vigilance task performance
dualTaskPerformance = [];
dualTaskSamples = [];
cAll = 1;
for j = 1:numParticipants % loop over subjects
    for blockID = 3:4 % loop over blocks/experimental conditions
        c = 1;
        currentResult = pulledData{j,blockID};
        currentParticipant = currentResult(1).info.subject;
        numTrials = length(currentResult);
        stopTrial = min([numTrials 30]);
        for n = 1:stopTrial % loop over trials for current subject & block
            if currentResult(n).info.dropped
                stopTrial = min([stopTrial+1 numTrials]);
                continue
            end
            if isnan(currentResult(n).dualTask.tLetterChanges)
                continue
            end
            c = c:c+length(currentResult(n).dualTask.tLetterChanges)-1;
            changeDetected(c) = currentResult(n).dualTask.changeDetected;
            changeMissed(c) = currentResult(n).dualTask.changeMissed;
                        
            c = c(end) + 1;
        end
        currentPerformance = [currentParticipant blockID c-1 sum(changeDetected) sum(changeMissed)];
        
        dualTaskPerformance = [dualTaskPerformance; currentPerformance];
        clear letterChangePhase changeDetected changeMissed currentPerformance
    end
end
clear c 
%% plot vigilance performance vs. relative time on display (Panel B)
letterDetectViewTime = NaN(numParticipants,3);
for i = 1:numParticipants
    currentDataset = letterChanges(letterChanges(:,1) == i, :);
    relativeTime = currentDataset(:,6);
    letterDetectViewTime(i,:) = [i nanmean(relativeTime) ...
        sum(dualTaskPerformance(dualTaskPerformance(:,1) == i,4))/sum(dualTaskPerformance(dualTaskPerformance(:,1) == i,3))];
end
figure(5)
hold on
plot(letterDetectViewTime(:,2), letterDetectViewTime(:, 3),...
    'o', 'MarkerFaceColor', 'k','MarkerEdgeColor', 'k')
%% plot trend lines
letterDetectViewTime = NaN(numParticipants*2,4);
count = 1;
for j= 3:4
    currentTool = letterChanges(letterChanges(:,2) == j, :);
    currentVigilance = dualTaskPerformance(dualTaskPerformance(:,2) == j,:);
    for i = 1:numParticipants
        currentDataset = currentTool(currentTool(:,1) == i, :);
        relativeTime = currentDataset(:,6);
        letterDetectViewTime(count,:) = [i j nanmean(relativeTime) ...
            currentVigilance(currentVigilance(:,1) == i,4)/currentVigilance(currentVigilance(:,1) == i,3)];
        count = count+1;
    end
end
clear count
figure(5)
hold on
% plot fingertip trials
plot(letterDetectViewTime(letterDetectViewTime(:,2) == 3, 3), letterDetectViewTime(letterDetectViewTime(:,2) == 3, 4),...
    'o', 'MarkerFaceColor', 'k','MarkerEdgeColor', 'k')
% plot tool trials
plot(letterDetectViewTime(letterDetectViewTime(:,2) == 4, 3), letterDetectViewTime(letterDetectViewTime(:,2) == 4, 4),...
    'o', 'MarkerFaceColor', 'none','MarkerEdgeColor', 'k')
p_TW = polyfit(letterDetectViewTime(letterDetectViewTime(:,2) == 4, 3),letterDetectViewTime(letterDetectViewTime(:,2) == 4, 4),1);
y_TW = polyval(p_TW,letterDetectViewTime(letterDetectViewTime(:,2) == 4, 3));
plot(letterDetectViewTime(letterDetectViewTime(:,2) == 4, 3), y_TW, 'k--')

ylim([0.5 1])
set(gca, 'Ytick', [.5 .75 1])
xlim([0.5 1])
set(gca, 'Xtick', [.5 .75 1])

cd(savePath)
save('letterDetectViewTime', 'letterDetectViewTime')
cd(analysisPath)
clear p_FT y_FT p_TW y_TW

%% plot the response time (reach onset relative to go signal) vs. the time 
% of the last detected letter change (relative to go) --> Panels C & D
numParticipants = 11;
numVariables = 5;
speedRelativeLetterChange = [];

for j = 1:numParticipants % loop over subjects
    for blockID = 3:4 % loop over dual task conditions
        currentResult = pulledData{j,blockID};
        currentParticipant = currentResult(1).info.subject;
        numTrials = length(currentResult);
        % open variable matrices that we want to pull
        currentVariable = NaN(numTrials,numVariables);
        stopTrial = min([numTrials 30]);
        for n = 1:stopTrial % loop over trials for current subject & block
            if currentResult(n).info.dropped
                stopTrial = min([stopTrial+1 numTrials]);
                continue
            end

            goTime = currentResult(n).info.timeStamp.go;
            reach = currentResult(n).info.timeStamp.reach;
            ballApproach = currentResult(n).info.timeStamp.ballApproach; 
            preInterval = 1;
            nextChange = 0;
            % check whether a letter change was detected in the current
            % trial
            if sum(currentResult(n).dualTask.changeDetected) > 0
                detectedChanges = currentResult(n).dualTask.tLetterChanges(currentResult(n).dualTask.changeDetected);
                detectedChange = detectedChanges(1);
                if length(detectedChanges) > 1 
                    nextChangeLC = detectedChanges(2);
                else
                    if n < stopTrial
                        if sum(currentResult(n+1).dualTask.changeDetected) > 0
                            nectLCs = 
                            nextChangeLC = nextLCs(1);
                            currentResult(n+1).dualTask.tLetterChanges(
                        end
                    else 
                        nextChangeLC = NaN;
                    end
                end
            else % otherwise use the previous trial
                if n > 1 && sum(currentResult(n-1).dualTask.changeDetected) > 0
                    detectedChanges = currentResult(n-1).dualTask.tLetterChanges(currentResult(n-1).dualTask.changeDetected);
                    detectedChange = detectedChanges(end);
                    nextChangeLC = NaN;
                else
                    continue
                end
            end
            % if the change happened before the go-signal good
            if detectedChange <= goTime
                letterChangeRelativeGo = detectedChange - goTime;
            else % otherwise use the previous trial
                if n > 1 && sum(currentResult(n-1).dualTask.changeDetected) > 0
                    detectedChanges = currentResult(n-1).dualTask.tLetterChanges(currentResult(n-1).dualTask.changeDetected);
                    letterChangeRelativeGo = detectedChanges(end) - goTime;
                    nextLCs = currentResult(n).dualTask.tLetterChanges(currentResult(n).dualTask.changeDetected);
                    if sum(nextLCs) > 0
                        nextChangeLC = nextLCs(1);
                    end
                else
                    continue
                end
            end
            if nextChangeLC > goTime && nextChangeLC-goTime <= ballApproach - goTime
                nextChange = 1;
            end
            goToReach = reach-goTime;

            currentVariable(n,:) = [currentParticipant blockID letterChangeRelativeGo ...
                goToReach nextChange];
        end

        speedRelativeLetterChange = [speedRelativeLetterChange; currentVariable];
    end
end

%%
lightGrey = [189,189,189]./255;
brightCyan = [0 174 239]./255; % [141 189 221]./255;
relativeChanges_PG = speedRelativeLetterChange(speedRelativeLetterChange(:,2) == 3,:);
% plot time of last detected letter change (before reach onset) relative to
% go signal
nextChanges = relativeChanges_PG(relativeChanges_PG(:,end) == 1,3);
lowerLimit = -5;
upperLimit = 0;
figure(33)
set(gcf,'renderer','Painters', 'Position', [20 100 436 364])
hold on
xlim([lowerLimit upperLimit])
line([lowerLimit upperLimit],[0 0], 'Color', lightGrey)
ylim([-1 1.5])
line([0 0],[-1 2], 'Color', lightGrey)
plot(relativeChanges_PG(:,3), relativeChanges_PG(:,4), '.', 'Color', lightGrey)
plot(nextChanges, relativeChanges_PG(relativeChanges_PG(:,end) == 1,4), ...
    '.', 'Color', brightCyan)
for i = lowerLimit+.5:0.5:upperLimit+.5
    reactBin = median(relativeChanges_PG(relativeChanges_PG(:,3) < i & relativeChanges_PG(:,3) > i-0.5, 4));
    line([i-.5 i], [reactBin reactBin], 'Color', 'k')
end
%%
relativeChanges_TW = speedRelativeLetterChange(speedRelativeLetterChange(:,2) == 4,:);
% plot time of last detected letter change (before reach onset) relative to
% reach onset and movement time in red
%earlyChanges = relativeChanges_TW(relativeChanges_TW(:,end) == 1,3);
figure(44)
set(gcf,'renderer','Painters', 'Position', [20 100 218 182])
hold on
xlim([lowerLimit upperLimit])
line([lowerLimit upperLimit],[0 0], 'Color', lightGrey)
ylim([-1 1.5])
line([0 0],[-1 2], 'Color', lightGrey)
plot(relativeChanges_TW(:,3), relativeChanges_TW(:,4), '.', 'Color', lightGrey)
% plot(earlyChanges, relativeChanges_TW(relativeChanges_TW(:,end) == 1,4), ...
%     '.', 'Color', brightCyan)
for i = lowerLimit+.5:0.5:upperLimit+.5
    reactBin = median(relativeChanges_TW(relativeChanges_TW(:,3) < i & relativeChanges_TW(:,3) > i-0.5, 4));
    line([i-.5 i], [reactBin reactBin], 'Color', 'k')
end